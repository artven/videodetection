#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass aghdpl
\begin_preamble
% \documentclass{aghdpl}               % przy kompilacji programem latex
% \documentclass[pdflatex,en]{aghdpl}  % praca w języku angielskim
% dodatkowe pakiety
\usepackage{enumerate}
\usepackage{listings}
\lstloadlanguages{TeX}
\usepackage{caption} 
\captionsetup[figure]{labelformat=simple, labelsep=period}
\captionsetup[table]{labelformat=simple, labelsep=period}
%\captionsetup{font=small}
\captionsetup{margin=10pt, font={small}, labelfont=bf, format=hang}
\usepackage{esint}
\clubpenalty = 10000
\widowpenalty = 10000
%\usepackage{graphicx}
%\usepackage{grfext}
%\AtBeginDocument{%
% \PrependGraphicsExtensions*{
%    .mps,.MPS,.pdf,.PDF,.eps,.EPS,.ps,.PS,
%    .png,.PNG,.jpg,.jpeg,.JPG,.JPEG,
%    .funny,.foobar
%  }%
%  \PrintGraphicsExtensions % see .log file
%}
% \usepackage[sort=none]{biblatex}
% \setlength{\itemsep}{-1\parsep}
%---------------------------------------------------------------------------
%\usepackage{epstopdf}
\usepackage{mciteplus}
% umozliwia wykrycie nieznanych znaków unicode
\usepackage{newunicodechar}
\DeclareUnicodeCharacter{FFFD}{?????}
\end_preamble
\options pdflatex
\use_default_options true
\maintain_unincluded_children false
\language polish
\language_package default
\inputencoding iso8859-2
\fontencoding global
\font_roman utopia
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics none
\default_output_format default
\output_sync 0
\bibtex_command bibtex
\index_command default
\float_placement H
\paperfontsize 12
\spacing onehalf
\use_hyperref true
\pdf_title "dyplom"
\pdf_author "Imie Nazwisko"
\pdf_subject "Temat"
\pdf_keywords "słowa kluczowe"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 0
\use_package amssymb 0
\use_package cancel 1
\use_package esint 0
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Indeks
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language polish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 3
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
author{Rafał Prusak}
\end_layout

\begin_layout Plain Layout


\backslash
shortauthor{R.
 Prusak}
\end_layout

\begin_layout Plain Layout


\backslash
titlePL{Wideo detekcja pojazdów samochodowych w ruchu drogowym}
\end_layout

\begin_layout Plain Layout


\backslash
titleEN{Video-based vehicle detection for road traffic applications}
\end_layout

\begin_layout Plain Layout


\backslash
shorttitle{LyX-owa formatka pracy dyplomowej}
\end_layout

\begin_layout Plain Layout


\backslash
faculty{Wydział Elektrotechniki, Automatyki,
\backslash

\backslash
Informatyki i Inżynierii Biomedycznej}
\end_layout

\begin_layout Plain Layout


\backslash
division{}
\end_layout

\begin_layout Plain Layout


\backslash
specialization{Automatyka i Robotyka}
\end_layout

\begin_layout Plain Layout


\backslash
thesistype{Praca dyplomowa inżynierska}
\end_layout

\begin_layout Plain Layout


\backslash
supervisor{dr inż.
 Zbigniew Marszałek}
\end_layout

\begin_layout Plain Layout


\backslash
acknowledgements{Wymaga odkomentowania linijek w aghdpl.cls} 
\end_layout

\begin_layout Plain Layout

%
\backslash
date{2015} 
\end_layout

\begin_layout Plain Layout


\backslash
titlepages
\end_layout

\begin_layout Plain Layout


\backslash
setcounter{tocdepth}{1}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Wstęp
\begin_inset CommandInset label
LatexCommand label
name "chap:Wstep"

\end_inset


\end_layout

\begin_layout Standard
Tutaj będzie wstęp do pracy inżynierskiej
\end_layout

\begin_layout Standard
Burzliwy rozwój nauki i techniki w XX wieku...
\end_layout

\begin_layout Chapter
Metody pomiarów parametrów ruchu drogowego
\end_layout

\begin_layout Standard
W wyniku rozwoju motoryzacji oraz rozbudowy infrastruktury drogowej pojawiła
 się konieczność zbierania i analizy informacji o ruchu pojazdów.
\end_layout

\begin_layout Section*
Generalny Pomiar Ruchu Drogowego
\end_layout

\begin_layout Standard
W Polsce od roku 1965, co 5 lat, dokonywany jest Generalny Pomiar Ruchu
 Drogowego(GPRD).
 Ma on na celu pozyskanie charakterystyk ruchu drogowego na wszystkich odcinakac
h dróg krajowych i wojewódzkich.
 Uzyskiwane w wyniku GPRD pomiary są wykorzystywane przy planowaniu rozbudowy
 infrastruktury drogowej, organizacji ruchu, utrzymaniu dróg, określaniu
 przyczyn wypadkowości czy badaniu wpływu ruchu na komfort życia mieszkańców
 i środowisko naruralne.
\end_layout

\begin_layout Standard
W czasie pomiarów pojazdy są klasyfikowane do jednej spośród 8 kategorii:
 
\end_layout

\begin_layout Enumerate
motocykle, 
\end_layout

\begin_layout Enumerate
samochody osobowe, 
\end_layout

\begin_layout Enumerate
lekkie samochody ciężarowe, 
\end_layout

\begin_layout Enumerate
samochody ciężarowe bez przyczepy, 
\end_layout

\begin_layout Enumerate
samochody ciężarowe z przyczepami/ naczepami, 
\end_layout

\begin_layout Enumerate
autobusy, 
\end_layout

\begin_layout Enumerate
ciągniki rolnicze, 
\end_layout

\begin_layout Enumerate
rowery.
 
\end_layout

\begin_layout Standard
Metodologię dokonywania pomiarów, terminy pomiarów, zadania obserwatorów,
 etc reguluje zarządzenie nr 38 Generalnego Dyrektora Dróg Krajowych i Autostrad
 z dnia 1 września 2014 r #dodać odnośnik do bibliografii
\end_layout

\begin_layout Section*
Parametry ruchu drogowego
\end_layout

\begin_layout Standard
Podczas dokonywania pomiarów dąży się do pozyskania zarówno indywidualnych
 informacji o pojazdach jak również ogólnej charakterystyki ruchu.
 Wyróżnia się w tym celu szereg parametrów:
\end_layout

\begin_layout Itemize
Prędkość - chwilowa, jazdy, podróży, miarodajna.
\end_layout

\begin_layout Itemize
Czas podróży - czas pokonania odcinka drogi.
\end_layout

\begin_layout Itemize
Natężenie ruchu - liczba pojazdów na jednostkę czasu.
\end_layout

\begin_layout Itemize
Gęstość ruchu - liczba pojazdów znajdujących się na odcinku drogi na jednostkę
 czasu.
\end_layout

\begin_layout Itemize
Zajętość drogi - procent drogi zajęty przez pojazdy.
\end_layout

\begin_layout Itemize
Bezpieczeństwo ruchu.
\end_layout

\begin_layout Itemize
Wpływ na środowisko.
\end_layout

\begin_layout Itemize
Zużycie paliwa.
\end_layout

\begin_layout Standard
Pomiarów ruchu drogowego dokonuję się w punkcie, na krótki odcinku drogi,
 w zdefiniowanym obszarze, na całej trasie lub za pomocą pojazdu/pojazdów
 próbnych poruszających się po drodze.
 Rozróżnia się 4 typy ruchu pojazdów: jazda swobodna, jazda przy maksymalnym
 przepływie, jazda w warunkach dużej gęstości oraz zator.
\end_layout

\begin_layout Standard
Indywidualny pojazd można opisać szeregiem wartości: klasą pojazdu, numerem
 rejestracyjnym, liczbą osi, odległościami między osiami, długością, szerokością
 , wysokością, prędkością czy naciskiem na jezdnię.
 Stosuję się także opis strefowy, środowiskowy, pogodowy i opis jezdni.
\end_layout

\begin_layout Section*
Detektory
\end_layout

\begin_layout Standard
Detektor jest to urządzenie składające się z czujnika, układu kondycjonowania,
 dyskryminatora oraz elementu wykonawczego.
 Jego celem jest wykrycie obecności pojazdu w punkcie bądź strefie pomiaru.
 Detektor powinien być urządzenie prostym w obsłudze i montażu, bezawaryjnym,
 pozwalającym na łatwy odczyt informacji.
 Stosowane są dwa rodzaje detektorów: bezinwazyjne i wbudowane(instalowane
 w nawierzchni).
 
\end_layout

\begin_layout Standard
Klasyfikacja detektorów wbudowanych:
\end_layout

\begin_layout Itemize
Linowy - drut stalowy lub linka nylonowa zamontowana jest na wysokości kilku
 minimetrów na jezdnią.
 Nacisk przejeżdżającego pojazdu powoduje naciąg linki i uruchomienie zestyku,
 który generuje impuls.
 Ten rodzaj detektory może generować fałszywe impulsy, wymaga regulacji
 i poprawy naciągu linki, ma ograniczoną maksymalna prędkość pomiarów.
 Jego zaletą jest prosta budowa.
\end_layout

\begin_layout Itemize
Taśmowy - dwie taśmy z gumowymi wkładkami, wypełnione gazem elektrycznie
 obojętnym.
 Nacisk pojazdu powoduje zetknięcie się ze sobą taśm.
 Do działania wymaga specjalnego osprzętu.
 Występują niekorzystne drgania styków.
 Montaż wymaga interwencji w nawierzchnię.
\end_layout

\begin_layout Itemize
Hydrauliczny - nacisk pojazdu na wąż wypełniony olejem powoduje podniesienie
 się poziomu w kapilarze i uruchomienie zestyku.
 Pojazdy o dużej masie mogą uszkodzić ten typ detektora.
\end_layout

\begin_layout Itemize
Pneumatyczny - działa na podobnej zasadzie co hydrauliczny.
\end_layout

\begin_layout Itemize
Reluktancyjny - nacisk samochodu powoduje zwierzenie się szczeliny.
 Następuje zmiana reluktancji obwodu magnetycznego w wyniku czego zmienia
 się częstotliwość sygnału wyjściowego.
\end_layout

\begin_layout Itemize
Rezystancyjny - nacisk pojazdu powoduje nieliniową zmianę rezystancji czujnika.
 Detektor ma ograniczoną prędkość pomiaru do max 80 km/h, więc jest rzadko
 wykorzystywany.
\end_layout

\begin_layout Itemize
Pojemnościowy - dwie elektrody oddzielone dielektrykiem.
 Nacisk pojazdu powoduje zmniejszenie szerokości kondensatora i zmianę jego
 pojemności.
 Czujniki te mają kiepską odporność na uszkodzenia mechaniczne i zasolenie.
 Ich montaż wymaga kosztownej interwencji w nawierzchnię.
\end_layout

\begin_layout Itemize
Piezoelektryczny - jest to taśma wykonana z materiału piezoelektrycznego
 lub kabel koncentryczny z umieszczoną w środku elektrodą.
 Czujniki są wrażliwe na zmiany temperatury, której wzrost powoduje pogorszenie
 jakości pomiaru.
 Mierzony może być jedynie nacisk zmienny w czasie, co ogranicza prędkość
 pomiaru do zakresu 20-110 km/h.
 Ten sposób pomiaru jest szeroko stosowany z powodu dużej czułości, szerokiemu
 zakresowi temperatury oraz niskiej cenie wykonania.
\end_layout

\begin_layout Itemize
Kwarcowe - działa na podobnej zasadzie co piezoelektryczny: nacisk samochodu
 na aluminiowy profil powoduje nacisk na element kwarcowy.
 Jest często stosowany w systemach ważenia pojazdów.
 W przeciwieństwie do poprzedniego typu, cechuje się odpornością na oddziaływani
e sił podłużnych i większą wrażliwością na oddziaływanie sił poprzecznych.
 Czujnik może pracować w szerokim zakresie temperatur i prędkości.
 Jest odporny na zakłócenia temperaturowe i elektromagnetyczne.
 Jego trwałość osiąga nawet 10 lat.
\end_layout

\begin_layout Itemize
Tensometryczny - używany jest zarówno w pomiarach nacisków osi pojazdów
 statycznych i dynamicznych.
 Ma postać platformy na której zamontowywane są tensometry, najczęściej
 w układzie pełnego mostka.Charakteryzuje się dużą dokładnością pomiaru(błędy
 rzędu 2% przy pomiarze statycznym).
 Może mierzyć pojazdy o prędkości do 200 km/h.
 Jego trwałość sięga 10 lat.
\end_layout

\begin_layout Itemize
Indukcyjny pętlowy - jest najbardziej rozpowszechnionym typem detektora.
 Może być stosowany w pomiarach prędkości, wysokości zawieszenia, ilości
 osi, detekcji incydentów.
 Uzyskiwany sygnał jest nazwany profilem magnetycznym pojazdu.
 Czujnik jest odporny na czynniki zewnętrzne, ma dużą trwałość, jego instalacja
 ma jezdni jest prosta i mało kosztowna.
\end_layout

\begin_layout Itemize
Magnetyczne - reaguje na zmiany pola magnetycznego.
 Jest bardziej czuły na zakłócenia niż pętlowy, ale jego instalacja w nawierzchn
i jest znacznie prostsza.
 
\end_layout

\begin_layout Standard
Drugim rodzajem detektorów są detektory nieinwazyjne.
 Spośród nich wyróżniamy:
\end_layout

\begin_layout Itemize
Laserowe aktywne - zbudowane są z nadajnika promieniowania, układu optycznego
 oraz odbiornika promieniowania.
 Mogą być wykorzystane do pomiaru prędkości, wysokości czy, przy odpowiedniej
 częstotliwości próbkowania, budowaniu profilu samochodu.
 Czujnik tej klasy mogą pracować w szerokim zakresie temperatur, wykazują
 odporność na warunki atmosferyczne oraz są niezależne od zewnętrznego oświetlen
ia.
\end_layout

\begin_layout Itemize
Laserowa pasywne - reagują na zmiany w promieniowaniu podczerwonym wywołane
 ruchem obiektów w obszarze detekcji.
 Detektor ren jest bardzo łatwy w instalacji - nie wymaga żadnej interwencji
 w ruch drogowy.
 Detektory tego typu nie oddziałują na siebie nawzajem.
\end_layout

\begin_layout Itemize
Akustyczne - składają się z matrycy mikrofonów, które zbierają dźwięki przejeżdż
ających samochodów: opony, silnik, ruch powietrza.
\end_layout

\begin_layout Itemize
Ultradźwiękowe - generują falę dźwiękową niesłyszalną dla człowieka, która
 służy wykrywaniu obecności obiektów w sferze detekcji.
\end_layout

\begin_layout Itemize
Mikrofalowe - działają na zasadzie radaru, generują fale wysokiej częstotliwości.
 Mogą pracować praktycznie w każdych warunkach.
\end_layout

\begin_layout Itemize
Kamery z systemami przetwarzania obrazu.
\end_layout

\begin_layout Chapter
Systemy wizyjne w zastosowaniach komercyjnych 
\end_layout

\begin_layout Standard
Rozdział ten stanowi przegląd dostępnych na rynku systemów pomiaru ruchu
 drogowego, w których zastosowanie znalazły algorytmy wizyjne.
\end_layout

\begin_layout Section*
Charakterystyka systemów wizyjnych
\end_layout

\begin_layout Standard
Systemy VIP(Video Image Processing) są coraz częściej stosowane przy pomiarach
 parametrów ruchu drogowego.
 Początkowo służyły one jedynie wizualizacji pomiarów bądź jako pomoc dla
 operatora w procesie weryfikacji poprawności pomiarów dokonywanych 
\begin_inset Quotes pld
\end_inset

standardowymi
\begin_inset Quotes prd
\end_inset

 metodami.
 Rozwój mocy obliczeniowych komputerów sprawił, że pojawiła się możliwość
 automatycznej analizy obrazu i wydobywania z niego użytecznych informacji,
 takich jak:
\end_layout

\begin_layout Itemize
obecność pojazdów na skrzyżowaniach, drogach, tunelach, etc,
\end_layout

\begin_layout Itemize
kierunek ruchu,
\end_layout

\begin_layout Itemize
klasyfikacja pojazdów,
\end_layout

\begin_layout Itemize
pomiar natężenia ruchu,
\end_layout

\begin_layout Itemize
informacje o obecności pieszych i rowerzystów,
\end_layout

\begin_layout Itemize
detekcja incydentów drogowych.
\end_layout

\begin_layout Standard
Obecnie wykorzystywane aplikacje wizyjne mogą działać zarówno jako samodzielne
 metody pomiaru lub stanowić część systemów kontroli wykroczeń, pomiaru
 prędkości czy ważenia samochodów.
 
\end_layout

\begin_layout Standard
Efektywność systemów wizyjnych szacuje się na około 90%.
 Posiadają one wiele zalet:
\end_layout

\begin_layout Itemize
są całkowicie bezinwazyjne,
\end_layout

\begin_layout Itemize
mimo wysokiej ceny budowy i instalacji systemu, jego dalsza eksploatacja
 odbywa się niskim kosztem,
\end_layout

\begin_layout Itemize
mają szerokie możliwości konfiguracji i dostosowywania strefy detekcji,
\end_layout

\begin_layout Itemize
mogą być zintegrowane z systemami pomiaru wbudowanymi w jezdnię,
\end_layout

\begin_layout Itemize
w zaawansowanych aplikacjach kamera może dokonywać auto-pozycjonowania w
 celu kompensacji zakłóceń wynikających ze zmiany położenia słońca czy spadku
 jakości oświetlenia,
\end_layout

\begin_layout Itemize
istnieje możliwość streamowania obrazu przez sieć Internet.
\end_layout

\begin_layout Standard
Największymi wadami metod wizyjnych są:
\end_layout

\begin_layout Itemize
niekorzystny wpływ warunków atmosferycznych: deszcz, śnieg, mgła, zachmurzenie,
\end_layout

\begin_layout Itemize
zjawiska związane ze wzajemnym mijaniem i zasłanianiem się pojazdów,
\end_layout

\begin_layout Itemize
zabrudzenia odkładające się na układzie optycznym.
\end_layout

\begin_layout Standard
Ważnym czynnikiem mającym wpływ na działanie systemu jest sposób montażu
 kamery względem nadzorowanego pasa ruchu.
 Najczęściej umieszcza się kamerę wysoko nad pasem ruchu.
 Umieszczenie punktu pomiaru z boku drogi zmniejsza skuteczność pomiaru
 o około 10%.
\end_layout

\begin_layout Section*
NeuroSoft
\end_layout

\begin_layout Standard
Rozwiązania wrocławskiej firmy NeuroSoft są jednymi z najpopularniejszych
 w kategorii systemów pomiaru i zarządzania ruchem drogowym.
 Firma ta oferuje system o nazwie 
\begin_inset Quotes pld
\end_inset

Neuro Car
\begin_inset Quotes prd
\end_inset

 oraz bardziej rozbudowany 
\begin_inset Quotes pld
\end_inset

Neuro Car 2.0
\begin_inset Quotes prd
\end_inset

.
 Programy te dokonują wideo rejestracji pojazdów, odczytów tablic rejestracyjnyc
h i wstępnej selekcji danych.
 System jest dostarczany w postaci terminala zbudowanego z kamery przemysłowej,
 komputera, karty WLAN, modemu GPRS i zalicza.
 Instalacja systemu jest bardzo prosta: polega na ustawieniu kamery, podpięciu
 zasilania i konfiguracji parametrów.
\end_layout

\begin_layout Standard
Zaletami systemu są:
\end_layout

\begin_layout Itemize
niska cena,
\end_layout

\begin_layout Itemize
możliwość integracji z innymi systemami
\end_layout

\begin_layout Itemize
wysoka skuteczność rozpoznawania,
\end_layout

\begin_layout Itemize
praca w trybie rzeczywistym,
\end_layout

\begin_layout Itemize
odporność na warunki zewnętrzne,
\end_layout

\begin_layout Itemize
rozpoznawanie marki, modelu, koloru,
\end_layout

\begin_layout Itemize
zastosowanie kamer z dużą dynamiką jasności,
\end_layout

\begin_layout Itemize
funkcjonalność zdalnego dostępu do danych.
\end_layout

\begin_layout Standard
W systemie Neuro Car zastosowano procesory wielordzeniowe, DSP oraz system
 operacyjny Linux, umożliwiając w ten sposób pomiar w stałej ilości 25 klatek
 na sekundę.
 Rozpoznanie, klasyfikacja i generacja opisu trwa nie mniej niż 100 ms.
 Dodatkowo program generuje od 3 do 8 zdjęć dla zidentyfikowanego pojazdu.
 Producent określa skuteczność detekcji na 99%.
\end_layout

\begin_layout Standard
W skład systemu wchodzi wiele dodatkowych aplikacji: 
\end_layout

\begin_layout Itemize
Velocity - pomiar prędkości chwilowej na podstawie serii zdjęć.
\end_layout

\begin_layout Itemize
Dangerous goods - identyfikacja samochodów przewożących materiały niebezpieczne.
\end_layout

\begin_layout Itemize
Classification - klasyfikacja pojazdów wg marki i typu(jednośladowy, osobowy,
 ciężarowy).
\end_layout

\begin_layout Itemize
PDA - aplikacja na platformy mobilne do rozpoznawania numerów tablic rejestracyj
nych.
\end_layout

\begin_layout Itemize
SectionControl - pomiar prędkości średniej na odcinku trasy.
\end_layout

\begin_layout Itemize
RedLight - detekcja przejazdu na czerwonym świetle.
\end_layout

\begin_layout Itemize
City - tworzenie płatnych stref w miastach i pobieranie opłat za przebywanie
 w nich.
\end_layout

\begin_layout Itemize
Parking - monitorowanie parkingu, rozliczenie opłat za parkowanie.
\end_layout

\begin_layout Itemize
Monitoring - uniwersalna aplikacja do obserwacji przepływu pojazdów.
\end_layout

\begin_layout Itemize
Base - itegracja z basami mySQL lub postgrSQl.
\end_layout

\begin_layout Itemize
Monitor - oprogramowanie do wizualizacji wyników pomiaru.
\end_layout

\begin_layout Itemize
ScaleGate - system rozpoznawania tablic i ważenia pojazdów, stosowany w
 hurtowniach i magazynach w celu pozyskiwania statystyk o tonażu materiałów
 przychodzący i opuszczających teren zakładu.
\end_layout

\begin_layout Itemize
Neurocar WIM&MIM - automatyczna detekcja pojazdów ponadgabarytowych(przeciążonyc
h oraz za wysokich), których obecność powoduje pogorszenie właściwości nawierzch
ni oraz stwarza zagrożenie na mostach, pod wiaduktami i w tunelach.
\end_layout

\begin_layout Section*
Cat Traffic
\end_layout

\begin_layout Standard
Poznańska firma Cat Traffic zajmuje się systemami stanowiącymi połączenie
 metod wizyjnych z wykorzystaniem płyt warzących.
 Firma wdrożyła kilkanaście stacji warzących na terenie Niemiec, Polski,
 Austrii i Szwajcarii.
 W Polsce CatTraffic wdrożyło na autostradzie A4 systemy pomiaru wagi i
 badania statystki ruchu pojazdów, oraz system czasu przejazdu na 
\begin_inset Quotes pld
\end_inset

Zakopiance
\begin_inset Quotes prd
\end_inset

.
\end_layout

\begin_layout Standard
Rozwiązania oferowane przez firmę:
\end_layout

\begin_layout Itemize
System pomiaru prędkości EasyCount oprócz pomiaru prędkości może badać również
 kierunek jazdy, odległości między pojazdami, i długość pojazdu.
 Przy użyciu dodatkowego osprzętu , EasyCount umożliwia pomiar na dwóch
 pasach ruchu.
 System ma do dyspozycji pamięć, która oferuje miejsce na dane o 800 000
 przejazdach.
 Można dokonywać jego konfiguracji za pomocą modułu GSM.
 Zasilanie zapewniają akumulatory lub baterie słoneczne.
\end_layout

\begin_layout Itemize
Easy Count-Bike- oferuje podobne funkcje co Easy Count, ale w odniesieniu
 do rowerzystów.
\end_layout

\begin_layout Itemize
Licznik AVC - to pętlowy system pomiaru ruchu z funkcjonalnością zapisu,
 transferu i analizy danych.
\end_layout

\begin_layout Itemize
V-REX 1000 - mobilny radar do odczytu tablic i badania struktury ruchu.
\end_layout

\begin_layout Itemize
VIM-VIVER - automatyczna stacja do ważenia pojazdów w ruchu, wraz z pozyskiwanie
 profilu pojazdu i numeru tablic rejestracyjnych.
\end_layout

\begin_layout Itemize
SAW - przenośna waga, umożliwiająca pomiar pojazdów o nacisku do 15 ton.
 Wykorzystywana przez Państwową Inspekcję Transportu Drogowego.
\end_layout

\begin_layout Itemize
ANPR - automatyczne rozpoznawanie tablic, z maksymalnie 8 kamer jednocześnie.
 
\end_layout

\begin_layout Chapter
Zastosowane narzędzia.
\end_layout

\begin_layout Standard
Poniższy rozdział zawiera krótki opis języka programowania, w którym została
 zaimplementowana praca inżynierska, zastosowanych zewnętrznych bibliotek
 oraz innych narzędzi użytych przy wykonaniu programu.
 
\end_layout

\begin_layout Section*
Python 
\end_layout

\begin_layout Standard
Algorytm wideo detekcji pojazdów został zaimplementowany w języku programowania
 Python, w wersji 3.4.
 Język ten posiada wiele korzystnych cech, które miały istotny wypływ na
 proces powstawania programu:
\end_layout

\begin_layout Itemize
Jest językiem obiektowym wysokiego poziomu.
 Obiektowość kodu, w przeciwieństwie do takich popularnych języków jak Java
 czy C#, nie jest jednak odgórnie wymuszana przez składnię języka.
 Powoduje to, że w Pythonie można pisać proste liniowe skrypty, służące
 np.
 do testowania funkcjonalności programu.
\end_layout

\begin_layout Itemize
Gramatyka języka jest bardzo prosta, podobna do składni języka angielskiego,
 przez co kod jest jasny i zrozumiały.
 Dodatkowo język ten wymusza na programiście stosowanie standardu PEP8,
 co powoduje jednolity i przejrzysty styl kodu w powstającym programie.
\end_layout

\begin_layout Itemize
Posiada bogatą bibliotekę standardową zawierającą moduły do programowania
 sieciowego, pracy z plikami html, xml, json, tworzenia interfejsów gui
 czy przetwarzania wielowątkowego.
\end_layout

\begin_layout Itemize
Jest językiem interpretowanym, więc programy wykonane w tym języku są niezależne
 od platformy i mogą być łatwo przenoszone na inne systemy operacyjne bądź
 platformy sprzętowe(komputer PC, systemy embeded).
\end_layout

\begin_layout Itemize
Ogromna popularność języka Python i szeroka społeczność skupiona wokół niego,
 skutkuje w ogramnej bazie gotowych rozwiązań, porad i tutoriali dostępnych
 w sieci.
\end_layout

\begin_layout Section*
OpenCV
\end_layout

\begin_layout Standard
OpenCV jest biblioteką 
\begin_inset Quotes pld
\end_inset

open source
\begin_inset Quotes prd
\end_inset

 służącą do cyfrowego przetwarzania obrazu wizyjnego.
 Jest ona bezpośrednio zaimplementowana w języku C/C++.
 Dostępna jest na wszystkich systemach operacyjnych stacjonarnych i mobilnych:
 Windows, Linux, MacOS, Android, iOS.
 Biblioteka zapewnia API dla wielu języków, takich jak: Python, Ruby, Java,
 Matlab.
 Została napisana z myślą o programach potrzebujących najwyższej wydajności
 i wykorzystaniu w aplikacjach czasu rzeczywistego.
 Najnowsze wydanie, w wersji 3.0, przynosi optymalizację biblioteki na wielu
 poziomach: algorytmów, wykorzystania wątków oraz rdzeni czy rozkazów dla
 CPU.
 Najwięksi producenci sprzętu komputerowego, tacy jak Intel czy Nvidia,
 także wzięli udział w tworzeniu biblioteki, dostarczając własne niskopoziomowe
 programy do wykonywania operacji na GPU.
\end_layout

\begin_layout Standard
Biblioteka jest podzielona na kilkanaście modułów, dostępnych w postaci
 bibliotek statycznych lub dynamicznych.
 Poniżej zostały omówione najważniejsze moduły, które znalazły zastosowanie
 w implementacji pracy inżynierskiej:
\end_layout

\begin_layout Itemize
core - podstawowe funkcje do działań na tablicach wielowymiarowych,
\end_layout

\begin_layout Itemize
highgui - obsługa graficznego interfejsu użytkownika, wyświetlanie zdjęć
 i wideo ,
\end_layout

\begin_layout Itemize
imgproc - funkcje do przetwarzania obrazu: filtracja, transformacje geometryczne
, konwersje między przestrzeniami barw,
\end_layout

\begin_layout Itemize
imgcodecs - interfejs do odczytu i zapisu zdjęć,
\end_layout

\begin_layout Itemize
videoio - przechwytywanie obrazu wideo,
\end_layout

\begin_layout Itemize
video - analiza obrazu wideo(śledzenie ruchu, wyodrębnianie tła),
\end_layout

\begin_layout Itemize
features2D - znajdywanie krawędzi, dopasowywanie szablonów,
\end_layout

\begin_layout Itemize
objectdect - dopasowywanie i wykrywanie obiektów.
 
\end_layout

\begin_layout Standard
OpenCv znalazło wiele zastosowań w aplikacjach przemysłowych, takich jak:
 inspekcja gotowych produktów w fabrykach, medycyna, bezpieczeństwo, systemy
 wizyjne „wielowymiarowe”, robotyka.
 
\end_layout

\begin_layout Section*
NumPy
\end_layout

\begin_layout Standard
NumPy jest zewnętrzną biblioteką 
\begin_inset Quotes pld
\end_inset

open source
\begin_inset Quotes prd
\end_inset

, służącą do przeprowadzania obliczeń na n-wymiarowych tablicach.
 Zapewnia ona funkcjonalność podobną do środowiska Matlab.
 Podstawowa typ tablicy, używany przez bibliotekę znacząco różni się od
 tablicy(listy) samego Pythona: lista jest kontenerem heterogonicznym, mogącym
 dynamicznie zmieniać swój rozmiar, natomiast 
\begin_inset Quotes pld
\end_inset

ndarray
\begin_inset Quotes prd
\end_inset

 jest tablicą homogeniczną o stałym rozmiarze.Rozwiązanie takie zapewnia
 wysoką wydajność obliczeń i możliwość bezpośredniej integracji z plikami
 binarnymi biblioteki napisanymi w języku C/C++.
\end_layout

\begin_layout Section*
SciPy
\end_layout

\begin_layout Standard
Biblioteka SciPy(skrót od 
\begin_inset Quotes pld
\end_inset

Scientific Python
\begin_inset Quotes prd
\end_inset

) jest biblioteką 
\begin_inset Quotes pld
\end_inset

open-source
\begin_inset Quotes prd
\end_inset

 zawierającą funkcje do rozwiązywania zadań optymalizacji, algebry liniowej,
 przetwarzania sygnałów czy rozwiązywania równań różniczkowych.
 Biblioteka pozwala zrealizować większość funkcjonalności środowiska Matlab.
 
\end_layout

\begin_layout Section*
PyGtk + Glade
\end_layout

\begin_layout Standard
W celu zaprojektowania i stworzenia interfejsu graficznego użytkownika zostało
 wykorzystane PyGtk oraz program Glade.
\end_layout

\begin_layout Standard
PyGtk jest nakładką na bibliotekę Gtk+, pozwalającą na tworzenie graficznego
 interfejsu użytkownika przy użyciu języka Python.
 Znalazła ona zastosowanie w wielu popularnych aplikacjach: BitTorrent,
 Gedit, GIMP.
 Jest częścią linuksowego środowiska graficznego GNOME.
 
\end_layout

\begin_layout Standard
Glade jest programem to projektowania interfejsu graficznego użytkownika
 z wykorzystaniem 
\begin_inset Quotes pld
\end_inset

widgetów
\begin_inset Quotes prd
\end_inset

 z biblioteki Gtk.
 Stworzony projekt okna interfejsu jest zapisywany do pliku xml.
 Spreparowany w ten sposób plik, może być wykorzystany do zbudowania okna
 za pomocą klasy GtkBuilder.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/glade.png
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Widok okna programu Glade
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section*
Sphinx
\end_layout

\begin_layout Standard
Sphinx jest to narzędzie służące do automatycznej generacji dokumentacji
 programu na podstawie komentarzy zawartych w kodzie.
 Program ten pozwala na tworzenie dokumentacji programów napisanych w Pythonie
 bądź C++.
 Aby dokumentacja mogła zostać wygenerowana, komentarze muszą być zgodne
 ze standardem 
\begin_inset Quotes pld
\end_inset

reStructuredText
\begin_inset Quotes prd
\end_inset

.
 Dokumentacja może być wygenerowana w postaci tekstu, htmla, w formacie
 pdf czy Latex.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/dokumentacja.png
	scale 50
	BoundingBox 0bp 0bp 1350bp 627bp

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Wygenerowana dokumentacja.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section*
Pycharm 
\end_layout

\begin_layout Standard
Pycharm jest środowiskiem deweloperskim dla języka Python, tworzonym przez
 firmę JetBrains.
 Zapewnia ono szereg przydatnych funkcji, takich jak: podpowiadanie składni,
 detekcję błędów, proponowanie poprawek i rozbudowany debuger.
 Działa zgodnie, ze wszystkimi popularnymi implementacjami języka Python:
 CPython, IronPython, Jython.
 Środowisko oferuje wsparcie dla innych technologi, np.
 Html5, Css3, JavaScript, Angular.js.
 Za pomocą Pycharma programista może korzystać z frameworków webowych takich
 jak Django czy Flask.
 Środowisko wspiera również systemy kontroli wersji(Git, SVN), posiada wsparcie
 dla narzędzi do pracy z bazami SQL oraz umożliwia zdalne edytowanie kodu
 w oparciu o protokuł SSH.
 Firma JetBrains udostępnia 3 wersje IDE: profesjonalną(płatną), edukacyjną(dla
 studentów) oraz 
\begin_inset Quotes pld
\end_inset

społecznościową
\begin_inset Quotes prd
\end_inset

.
\end_layout

\begin_layout Chapter
Opis programu
\end_layout

\begin_layout Standard
Poniższy rozdział opisuje interfejs i sposób działania zaimplementowanego
 programu.
\end_layout

\begin_layout Section*
Instalacja 
\end_layout

\begin_layout Standard
Poniżej został opisany sposób instalacji programu oraz wymaganych bibliotek
 na systemie Linux.
 
\end_layout

\begin_layout Enumerate
Wchodzimy na stronę, i pobieramy najnowszą wersję programu:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

https://github.com/artven/videodetection/releases/latest
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Przechodzimy do folderu zawierające pobrany plik: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cd ~/Pobrane
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Rozpakowujemy i kopiujemy program do katalogu domowego: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

unzip videodetection.v1.0.zip  
\end_layout

\begin_layout Plain Layout

mkdir ~/videodetection
\end_layout

\begin_layout Plain Layout

cp -r cp -r 'videodetection v1.0'/* ~/videodetection/ 
\end_layout

\begin_layout Plain Layout

cd ~/videodetection
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Instalujemy zależności dla biblioteki OpenCV: 
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

sudo apt-get update && sudo apt-get upgrade && sudo apt-get dist-upgrade
 && sudo apt-get autoremove
\end_layout

\begin_layout Plain Layout

sudo apt-get install build-essential cmake qt5-default libvtk6-dev install
 zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev
 libopenexr-dev libgdal-dev libdc1394-22-dev libavcodec-dev libavformat-dev
 libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev
 yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev
 libtbb-dev libeigen3-dev python-dev python-tk python-numpy python3-dev
 python3-tk python3-numpy ant default-jdk doxygen
\end_layout

\begin_layout Plain Layout

	
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Pobieramy bibliotekę z oficjalnej strony:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cd /tmp
\end_layout

\begin_layout Plain Layout

wget https://github.com/Itseez/opencv/archive/3.1.0.zip
\end_layout

\begin_layout Plain Layout

unzip 3.1.0.zip
\end_layout

\begin_layout Plain Layout

cd opencv-3.1.0/ 
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Kompilujemy i instalujemy OpenCV: 
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

mkdir build
\end_layout

\begin_layout Plain Layout

cd build
\end_layout

\begin_layout Plain Layout

cmake -DWITH_QT=ON -DWITH_OPENGL=ON -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON
 -DWITH_XINE=ON -DBUILD_EXAMPLES=ON ..
\end_layout

\begin_layout Plain Layout

make -j4
\end_layout

\begin_layout Plain Layout

sudo make install
\end_layout

\begin_layout Plain Layout

sudo ldconfig
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Instalujemy sklearn: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pip3 install -U scikit-learn
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Struktura programu
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/struktura_programu.png
	scale 60

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Widok struktury programu
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Program został podzielony na następujące pliki oraz foldery:
\end_layout

\begin_layout Itemize
data - folder do którego program zapisuje dane o wykrytych pojazdach do
 baz danych SQLite,
\end_layout

\begin_layout Itemize
doc - dokumentacja programu w formacie .html wygenerowana przy użyciu narzędzia
 Sphinx,
\end_layout

\begin_layout Itemize
gui - pliki w formacie .glade używane do wyświetlania interfejsu graficznego
 użytkownika,
\end_layout

\begin_layout Itemize
images - zdjęcia wykrytych samochodów, 
\end_layout

\begin_layout Itemize
samples - przykładowe próbki nagrań ruchu samochodów,
\end_layout

\begin_layout Itemize
src - pliki źródłowe programu,
\end_layout

\begin_layout Itemize
videos - zapisane przez program wyniki analizy w postaci plików wideo,
\end_layout

\begin_layout Itemize
config.json - plik konfiguracyjny programu, zawiera parametry algorytmów
 oraz opcje dotyczące prezentacji wyników programu,
\end_layout

\begin_layout Itemize
data.log - plik gdzie są odkładane komunikaty diagnostyczne programu,
\end_layout

\begin_layout Itemize
readme.txt - plik tekstowy zawierający informacje o programie,
\end_layout

\begin_layout Itemize
run.py - skrypt uruchamiający program.
\end_layout

\begin_layout Section*
Interfejs graficzny 
\end_layout

\begin_layout Standard
Po uruchomieniu programu skryptem z pliku run.py pojawia się główne okno
 programu.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/widok_programu.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Główne okno programu
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
W skład głównego okna wchodzi górne menu, obszar odtwarzania pliku wideo,
 lista przetwarzanych plików, lista wyników klasyfikacji, menu odtwarzania
 i pasek informujący o postępie przetwarzania.
\end_layout

\begin_layout Paragraph
Funkcje elementów górnego menu:
\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Dodaj wideo
\begin_inset Quotes prd
\end_inset

 - otwiera poniższe okno dialogowe, umożliwiające wybór jednego bądź większej
 ilości plików wideo do analizy.
 Wybrane pliki są dodawane do listy po prawej stronie.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/wybor_pliku.png
	scale 50

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Okno wyboru plików
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Dane
\begin_inset Quotes prd
\end_inset

 - umożliwia wybranie bazy danych i podejrzenie jej zawartości.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/baza_danych.png
	scale 60

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Podgląd bazy danych
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Obrazy
\begin_inset Quotes prd
\end_inset

 - włącza przeglądarkę zapisanych przez program zdjęć pojazdów.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/przeladanie_obrazow.png
	scale 40

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Widok przeglądania obrazów.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Wyczyść
\begin_inset Quotes prd
\end_inset

 - usuwa zdjęcia, filmy, bazy danych oraz wyniki klasyfikacji.
\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Ustawienia
\begin_inset Quotes prd
\end_inset

 -pokazuje okno ustawień programu.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/ustawienia.png
	scale 60

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Okno ustawień programu.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Dokumentacja
\begin_inset Quotes prd
\end_inset

 - uruchamia stronę html z dokumentacją.
\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

O programie
\begin_inset Quotes prd
\end_inset

 - uruchamia okienko dialogowe pokazujące krótką informację o programie.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/o_programie.png
	scale 60

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Informacja o programie
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Zakończ
\begin_inset Quotes prd
\end_inset

 - wyłącza program.
\end_layout

\begin_layout Section*
Ustawienia
\end_layout

\begin_layout Standard
Okno ustawień umożliwia dostosowywanie parametrów algorytmu oraz wizualizacji
 danych.
\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Odległość pixele
\begin_inset Quotes prd
\end_inset

 - wartość tego pola służy do wyliczynie przelicznika pixeli na obrazie
 na rzeczywistą odległość w metrach.
\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Odległość metry
\begin_inset Quotes prd
\end_inset

 - wartość tego pola ma również zastosowanie w przeliczaniu pixeli na metry.
 Procedura kalibracji pomiaru została opisana w poprzednim rozdziale 
\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Liczba kolorów
\begin_inset Quotes prd
\end_inset

 - określa liczbę kolorów jaką program ma rozpoznać na obiekcie.
\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Strefa czułości pozioma
\begin_inset Quotes prd
\end_inset

 - określa ona obszar w poziomie, w którym obiekty są wykrywane i śledzone.
\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Strefa czułości pionowa
\begin_inset Quotes prd
\end_inset

 - określa ona obszar w ponie, w którym obiekty są wykrywane i śledzone.
\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Wielkość obiektu
\begin_inset Quotes prd
\end_inset

 - obiekt o mniejszej wartości są ignorowane po fazie binearyzacji
\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Odległość od krawędzi
\begin_inset Quotes prd
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Rysuj rejon czułości
\begin_inset Quotes prd
\end_inset

 - oznacza na obszarze czerwonym prostokątem ekran będący strefą detekcji
 kamery.
\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Rysuj rejon pomiaru prędkości
\begin_inset Quotes prd
\end_inset

 - rysuje na obszarze detekcji dwa pionowe różowe paski służące do kalibracji
 przelicznika pixeli na metry, w celu obliczenia prędkości.
\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Oznaczaj samochody
\begin_inset Quotes prd
\end_inset

 - oznacza samochody zielonym prostokątem i krzyżykiem symbolizującym środek
 ciężkości pojazdu.
\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Wypisz informację o prędkości
\begin_inset Quotes prd
\end_inset

 - podpisuje obraz zidentyfikowanego pojazdu informacją o prędkości.
\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Wypisz informację o rozmiarze
\begin_inset Quotes prd
\end_inset

 - podpisuje obraz zidentyfikowanego pojazdu informacją rozmiarze: długości,
 wysokości, polu powierzchni bocznej.
\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Narysuj pasek kolorów
\begin_inset Quotes prd
\end_inset

 - rysuje na obrazie zidentyfikowanego pojazdu pasek informujący o kolorze
 tego pojazdu.
\end_layout

\begin_layout Chapter
Algorytm detekcji i klasyfikacji pojazdów.
\end_layout

\begin_layout Standard
W tym rozdziale zostały opisane kolejne etapy zaimplementowanego algorytmu.
\end_layout

\begin_layout Section*
Kalibracja programu
\end_layout

\begin_layout Paragraph
Przed rozpoczęciem analizy próbek wideo należy dobrać odpowiednie ustawienia.
 W tym celu istnieje możliwość wyłączenia przetwarzania obrazu przez algorytm,
 co znacząco polepsza wydajność programu na tym etapie.
 Pierwszym krokiem konfiguracji programu, powinno być dostosowanie rozmiaru
 strefy czułości pojazdu.
 Należy przy tym stosować się do następujących zasad:
\end_layout

\begin_layout Enumerate
Stefa czułości powinna być tak dobrana aby obejmowała obszar obrazu, będący
 faktycznym rejonem przejazdu pojazdów.
 Wybranie zbyt dużej strefy, obejmującej np.
 pobocze, tło, etc, może powodować pojawienie się błędnych odczytów spowodowanyc
h klasyfikacja odbić światła i cieni jako poruszających się pojazdów.
\end_layout

\begin_layout Enumerate
Strefa powinna być na tyle wąska aby pojazdy były wykrywane dopiero gdy
 znajdą się całkowicie w kadrze.
 W przeciwnym razie tracona jest dokładność pomiaru prędkości.
\end_layout

\begin_layout Paragraph
Kolejnym etapem jest wprowadzenie granic pomiaru prędkości.
 Przed nagraniem danych z ruchu drogowego operator powinien dokonać ręcznego
 pomiaru odległości, następnie w trakcie konfiguracji programu oznaczyć
 zmierzony odcinek granicami pomiaru i podać zmierzoną wartość.
 Wartość ta stanowi podstawę przelicznika pixeli na obrazie na rzeczywistą
 odległość.
\end_layout

\begin_layout Paragraph
Ostatnim etapem powinno być dobranie minimalnego rozmiaru obiektu.
 Jest to ważna opcja, kluczowa podczas selekcji obiektów na obrazie.
 Umożliwia odrzucenie obiektów bodących zakłóceniami.
 Minimalna wielkość obiektu powinna być dobrana z uwzględnieniem odległości
 urządzenia nagrywającego od jezdni - im urządzenie było bliżej szosy, dolna
 granica powinna być większa.
 
\end_layout

\begin_layout Paragraph
W programie, na chwilę obecną, nie ma możliwości ustawienia przez użytkownika
 górnej granicy obiektu.
 Została ona ustalona jako stała wartość równa połowie liczby pikseli klatki
 obrazu.
\end_layout

\begin_layout Section*
Detekcja obiektów
\end_layout

\begin_layout Paragraph*
Pierwszym właściwym krokiem algorytmu jest analiza pojedynczej klatki obrazu,
 znalezienie grup pikseli mogących być obiektami i i ich selekcja.
 
\end_layout

\begin_layout Paragraph*
Pobierane z pliku wideo klatki obrazu są poddawane operacji wyodrębniania
 tła, która oddziela niezmieniające się, nieruchome elementy tła od poruszającyc
h się elementów na pierwszym planie.
 Operacja ta została zaimplementowana w bibliotece OpenCV pod postacią klas
 BackgroundSubtractorMOG(), BackgroundSubtractorMOG2() oraz BackgroundSubtractor
GMG.
\end_layout

\begin_layout Description
BackgroundSubtractorMOG - wyodrębnia tło w oparciu o algorytm o anglojęzycznej
 nazwie 
\begin_inset Quotes pld
\end_inset

mixture-based background/foreground segmentation algorithm
\begin_inset Quotes prd
\end_inset

.
 #Dodać opis#
\end_layout

\begin_layout Description
BackgroundSubtractorMOG2 - klasa ta została oparta na tym samym algorytmie
 co powyższa, z uwzględnieniem dodatkowych warunków opisanych w artykułach
 Z.
 Zikovicia.
 #Dodać opis#
\end_layout

\begin_layout Description
BackgroundSubtractorGMG - ostatnia klasa różni się znacząco o dwóch pozostałych,
 blebleble
\end_layout

\begin_layout Standard
# dodać przykładowy przejazd przeanalizowany wszystkimi 3 metodami #
\end_layout

\begin_layout Standard
W programie została wykorzystana klasa MOG2, ze względu na #dopisać#
\end_layout

\begin_layout Paragraph*
Następnym etapem jest filtracja uzyskanego obrazu binarnego.
 Odbywa się ona po przez wykonanie na obrazie kolejno: otwarcia z jądrem
 eliptycznym, filtracji medianowej z oknem 5x5, dylatacji i binaryzacja.
 
\end_layout

\begin_layout Description
Otwarcie jest to operacja, blebleble
\end_layout

\begin_layout Description
Mediana 
\end_layout

\begin_layout Description
Dylatacja
\end_layout

\begin_layout Description
Binaryzacja asdsa
\end_layout

\begin_layout Paragraph*
Na przefiltrowanym obrazie jest oznaczane są unikalnymi wartościami rozłączne
 elementy pierwszego planu.
 Każdy znaleziony obiekt jest poddawany ocenie względem kryterium rozmiaru.
 Jeżeli ocena jest pozytywna program dokonuje opisu rejonu elementu prostokątem
 i informację o położeniu lewego-górnego wierzchołka prostokąta, wysokości,
 długości i środku ciężkości obiektu.
 Następnie odrzucane są te obiekty, które znajdują się po za rejonem czułości
 kamery.
 
\end_layout

\begin_layout Paragraph*
Zastosowana metodologia filtracji i selekcji zapewnia że program skutecznie
 wykrywa obiekty będące pojazdami oraz odrzuca większość zakłóceń.
\end_layout

\begin_layout Section*
Śledzenie pojazdów
\end_layout

\begin_layout Paragraph*
Śledzenie pojazdów polega na analizie informacji o obiektach znajdujących
 się na kolejnych klatkach obrazu.
 Klasa odpowiedzialna za śledzenie dokonuje przeglądu wszystkich obiektów,
 pod kątem położenia w rejonie czułości kamery według poniższego algorytmu:
\end_layout

\begin_layout Enumerate
Sprawdź czy obiekt znajduje się blisko lewej bądź prawej krawędzi obrazu.
 Jeśli nie, idź do punktu 4.
\end_layout

\begin_layout Enumerate
Jeżeli lista obiektów przy przeciwnej krawędzi jest pusta, dodaj obiekt
 z aktualną klatką obrazu do listy tej strony.
 Sytuacja ta oznacza, że pojazd pojawił się w obszarze czułości kamery.
\end_layout

\begin_layout Enumerate
Jeżeli lista obiektów przy przeciwnej krawędzi rejonu detekcji nie jest
 pusta, pobierz pierwszą informację z tej listy i przekaż informacje o obiektach
 z obu stron dalej.
 Sytuacja ta oznacza, że pojazd opuszcza rejon wykrywania.
\end_layout

\begin_layout Enumerate
Weź następny obiekt do analizy.
\end_layout

\begin_layout Paragraph*
W celu zabezpieczenia przed kilkukrotnym wykryciem i zapisaniem tego samego
 przejazdu, po wykryciu pojawienia się pojazdu lub opuszczenia przez niego
 obszaru, wykrywanie zostaje zablokowane aż do momentu opuszczenia otoczenia
 krawędzi rejonu detekcji.
\end_layout

\begin_layout Paragraph*
Ocena obecności w otoczeniu krawędzi odbywa się po przez obliczenie odległości
 środka ciężkości obiektu od krawędzi rejonu.
 
\end_layout

\begin_layout Section*
Klasyfikacja 
\end_layout

\begin_layout Section*
Zapis danych
\end_layout

\begin_layout Chapter
Analiza wyników 
\end_layout

\begin_layout Chapter
Rozwój oprogramowania
\end_layout

\begin_layout Section*
Nie zrealizowane funkcjonalności
\end_layout

\begin_layout Standard
W trakcie realizacji pracy inżynierskiej nie udało się autorowi zrealizować
 wszystkich pierwotnych założeń.
 
\end_layout

\begin_layout Standard
W trakcie pracy nad algorytmem okazało się, że detekcja pojazdów w ruchu
 na drodze dwupasmowej jest zadaniem bardzo trudnym, jeżeli program ma do
 dyspozycji jedynie obraz wideo z pobocza drogi.
 Zachodzi wtedy wiele 
\begin_inset Quotes pld
\end_inset

niekorzystnych
\begin_inset Quotes prd
\end_inset

 zjawisk:
\end_layout

\begin_layout Itemize
Mijanie się samochodów - w tej sytuacji dochodzi do zlewania się obiektów
 w jeden na obrazie binarnym a pojazdy mogą dotrzeć do przeciwnych końców
 drogi w odwrotnej kolejności.
 W celu zabezpieczenia programu przed wynikającymi z tej sytuacji przekłamaniami
, należałoby dokonać poważnych zmian w algorytmie: zamiast pobierać informację
 o pojeździe na końcach obszaru 
\begin_inset Quotes pld
\end_inset

czułości
\begin_inset Quotes prd
\end_inset

 kamery, program musiałby śledzić obiekt w całym polu, wykryć kierunek ruchu
 i nadać mu szacowaną prędkość(przyrost pozycji w pixelach na kratkę obrazu).
\end_layout

\begin_layout Itemize
Wyprzedzanie się pojazdów - ta sytuacja może powodować, że dwa obiekty staną
 się dla programu jednym, jeżeli manewr zakończy się po za polem widzenia
 kamery.
 Skutkiem tej sytuacji będzie całkowita utrata wiadomości o obiekcie.
\end_layout

\begin_layout Itemize
Wzajemne rzucanie cienia i odbicia światła od samochodów - Powoduje to zniekszta
łcenia na obrazie po wyodrębnianiu tła, takie jak połączenia się dwóch pojazdów
 w jeden w skutek odbicia światła, albo podział pojazdu na dwa niezwiązane
 ze sobą obiekty.
\end_layout

\begin_layout Standard
Rozwiązaniem powyższych problemów mogłoby być całkowite przemodelowanie
 algorytmu: odejście od prostej, ale wydajnej metody wyodrębnia tła na rzecz
 bardziej skomplikowanych algorytmów np.
 
\begin_inset Quotes pld
\end_inset

cam shift
\begin_inset Quotes prd
\end_inset

, 
\begin_inset Quotes pld
\end_inset

mean shift
\begin_inset Quotes prd
\end_inset

 czy 
\begin_inset Quotes pld
\end_inset

optical-flow
\begin_inset Quotes prd
\end_inset

.
\end_layout

\begin_layout Standard
Kolejnym założeniem było zrealizowane funkcjonalności do pracy z obrazem
 ruchu drogowego 
\begin_inset Quotes pld
\end_inset

on-line
\begin_inset Quotes prd
\end_inset

 streamowanym w sieci Internet.
 Niepowodzenie było spowodowane dwoma faktami :
\end_layout

\begin_layout Itemize
Znacząca większość dostępnych w sieci obrazów z kamer monitorujących filmuje
 ruch drogowy z pozycji 
\begin_inset Quotes pld
\end_inset

nad drogą
\begin_inset Quotes prd
\end_inset

 a nie z pobocza drogi.
\end_layout

\begin_layout Itemize
Udostępniany w sieci obraz jest obrazem w skali szarości, niskiej jakości
 i o bardzo małej ilości klatek, rzędu 2-3 na sekundę, co utrudnia detekcję
 poruszających się obiektów.
\end_layout

\begin_layout Section*
Przyszłe zmiany w programie
\end_layout

\begin_layout Standard
W ciągu dalszego rozwoju oprogramowania możliwe byłyby następujące zmiany:
\end_layout

\begin_layout Itemize
Podział kodu na klasy i metody operujący na tych samych 
\begin_inset Quotes pld
\end_inset

poziomach
\begin_inset Quotes prd
\end_inset

 abstrakcji - kod programu miejscami jest niezrozumiały, kilka metod jest
 zdecydowanie za długie, mieszają się operacje o różnej abstrakcji, co skutkuje
 niestety w trudnościach w modyfikacji i dodawaniu do programu nowych funkcjonal
ności.
\end_layout

\begin_layout Itemize
Dodanie obsługi baz MySql - dodanie tej funkcjonalności umożliwiłoby automatyczn
e dokonywanie pomiarów 
\begin_inset Quotes pld
\end_inset

w terenie
\begin_inset Quotes prd
\end_inset

 po przez użycie mini-komputera klasy RassberyPi i kamery, natomiast obserwacja
 wyników mogłaby odbywać się zdalnie za pomocą strony WWW.
\end_layout

\begin_layout Itemize
Zbudowanie funkcjonalności streamowanie obrazu z programu na stronie WWW.
\end_layout

\begin_layout Itemize
Dodanie konfiguracji przez WWW.
\end_layout

\begin_layout Itemize
Dodatkowe opcje - ustawienia programu należało by poszerzyć o parametry
 wszystkich algorytmów.
\end_layout

\begin_layout Itemize
Zmiany w GUI - istnieje możliwość dodania do gui rysowania wykresów/opisywania
 statystyk przejechanych pojazdów.
\end_layout

\begin_layout Chapter
Podsumowanie
\begin_inset CommandInset label
LatexCommand label
name "chap:Podsumowanie"

\end_inset


\end_layout

\begin_layout Standard
A tutaj będzie podsumowanie pracy inżynierskiej, gdy już napiszę to gówno.
\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "bibliografia"
options "bibtotoc,bst/IEEEtranS"

\end_inset


\end_layout

\end_body
\end_document
