#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass aghdpl
\begin_preamble
% \documentclass{aghdpl}               % przy kompilacji programem latex
% \documentclass[pdflatex,en]{aghdpl}  % praca w języku angielskim
% dodatkowe pakiety
\usepackage{enumerate}
\usepackage{listings}
\lstloadlanguages{TeX}
\usepackage{caption} 
\captionsetup[figure]{labelformat=simple, labelsep=period}
\captionsetup[table]{labelformat=simple, labelsep=period}
%\captionsetup{font=small}
\captionsetup{margin=10pt, font={small}, labelfont=bf, format=hang}
\usepackage{esint}
\clubpenalty = 10000
\widowpenalty = 10000
\usepackage[OT4]{fontenc}
%\usepackage{graphicx}
%\usepackage{grfext}
%\AtBeginDocument{%
% \PrependGraphicsExtensions*{
%    .mps,.MPS,.pdf,.PDF,.eps,.EPS,.ps,.PS,
%    .png,.PNG,.jpg,.jpeg,.JPG,.JPEG,
%    .funny,.foobar
%  }%
%  \PrintGraphicsExtensions % see .log file
%}
% \usepackage[style=numeric-comp]{biblatex}
% \setlength{\itemsep}{-1\parsep}
%---------------------------------------------------------------------------
%\usepackage{epstopdf}
\end_preamble
\options pdflatex
\use_default_options true
\maintain_unincluded_children false
\language polish
\language_package default
\inputencoding iso8859-2
\fontencoding global
\font_roman utopia
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics none
\default_output_format default
\output_sync 0
\bibtex_command bibtex
\index_command default
\float_placement H
\paperfontsize 12
\spacing onehalf
\use_hyperref true
\pdf_title "dyplom"
\pdf_author "Imie Nazwisko"
\pdf_subject "Temat"
\pdf_keywords "słowa kluczowe"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 0
\use_package amssymb 0
\use_package cancel 1
\use_package esint 0
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Indeks
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language polish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 3
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
author{Rafał Prusak}
\end_layout

\begin_layout Plain Layout


\backslash
shortauthor{R.
 Prusak}
\end_layout

\begin_layout Plain Layout


\backslash
titlePL{Wideo detekcja pojazdów samochodowych w ruchu drogowym}
\end_layout

\begin_layout Plain Layout


\backslash
titleEN{Video-based vehicle detection for road traffic applications}
\end_layout

\begin_layout Plain Layout


\backslash
shorttitle{LyX-owa formatka pracy dyplomowej}
\end_layout

\begin_layout Plain Layout


\backslash
faculty{Wydział Elektrotechniki, Automatyki,
\backslash

\backslash
Informatyki i Inżynierii Biomedycznej}
\end_layout

\begin_layout Plain Layout


\backslash
division{}
\end_layout

\begin_layout Plain Layout


\backslash
specialization{Automatyka i Robotyka}
\end_layout

\begin_layout Plain Layout


\backslash
thesistype{Praca dyplomowa inżynierska}
\end_layout

\begin_layout Plain Layout


\backslash
supervisor{dr inż.
 Zbigniew Marszałek}
\end_layout

\begin_layout Plain Layout


\backslash
acknowledgements{Wymaga odkomentowania linijek w aghdpl.cls} 
\end_layout

\begin_layout Plain Layout

%
\backslash
date{2015} 
\end_layout

\begin_layout Plain Layout


\backslash
titlepages
\end_layout

\begin_layout Plain Layout


\backslash
setcounter{tocdepth}{1}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Wstęp
\begin_inset CommandInset label
LatexCommand label
name "chap:Wstep"

\end_inset


\end_layout

\begin_layout Standard
Tutaj będzie wstęp do pracy inżynierskiej
\end_layout

\begin_layout Standard
Wideo detekcja 
\end_layout

\begin_layout Chapter
Systemy wizyjne w zastosowaniach komercyjnych 
\end_layout

\begin_layout Chapter
Zastosowane narzędzia.
\end_layout

\begin_layout Standard
Poniższy rozdział zawiera krótki opis języka programowania, w którym została
 zaimplementowana praca inżynierska, zastosowanych zewnętrznych bibliotek
 oraz innych narzędzi użytych przy wykonaniu programu.
 
\end_layout

\begin_layout Section*
Python 
\end_layout

\begin_layout Standard
Algorytm wideo detekcji pojazdów został zaimplementowany w języku programowania
 Python, w wersji 3.4.
 Język ten posiada wiele korzystnych cech, które miały istotny wypływ na
 proces powstawania programu:
\end_layout

\begin_layout Itemize
Jest językiem obiektowym wysokiego poziomu.
 Obiektowość kodu, w przeciwieństwie do takich popularnych języków jak Java
 czy C#, nie jest jednak odgórnie wymuszana przez składnię języka.
 Powoduje to, że w Pythonie można pisać proste liniowe skrypty, służące
 np.
 do testowania funkcjonalności programu.
\end_layout

\begin_layout Itemize
Gramatyka języka jest bardzo prosta, podobna do składni języka angielskiego,
 przez co kod jest jasny i zrozumiały.
 Dodatkowo język ten wymusza na programiście stosowanie standardu PEP8,
 co powoduje jednolity i przejrzysty styl kodu w powstającym programie.
\end_layout

\begin_layout Itemize
Posiada bogatą bibliotekę standardową zawierającą moduły do programowania
 sieciowego, pracy z plikami html, xml, json, tworzenia interfejsów gui
 czy przetwarzania wielowątkowego.
\end_layout

\begin_layout Itemize
Jest językiem interpretowanym, więc programy wykonane w tym języku są niezależne
 od platformy i mogą być łatwo przenoszone na inne systemy operacyjne bądź
 platformy sprzętowe(komputer PC, systemy embeded).
\end_layout

\begin_layout Itemize
Ogromna popularność języka Python i szeroka społeczność skupiona wokół niego,
 skutkuje w ogramnej bazie gotowych rozwiązań, porad i tutoriali dostępnych
 w sieci.
\end_layout

\begin_layout Section*
OpenCV
\end_layout

\begin_layout Standard
OpenCV jest biblioteką 
\begin_inset Quotes pld
\end_inset

open source
\begin_inset Quotes prd
\end_inset

 służącą do cyfrowego przetwarzania obrazu wizyjnego.
 Jest ona bezpośrednio zaimplementowana w języku C/C++.
 Dostępna jest na wszystkich systemach operacyjnych stacjonarnych i mobilnych:
 Windows, Linux, MacOS, Android, iOS.
 Biblioteka zapewnia API dla wielu języków, takich jak: Python, Ruby, Java,
 Matlab.
 Została napisana z myślą o programach potrzebujących najwyższej wydajności
 i wykorzystaniu w aplikacjach czasu rzeczywistego.
 Najnowsze wydanie, w wersji 3.0, przynosi optymalizację biblioteki na wielu
 poziomach: algorytmów, wykorzystania wątków oraz rdzeni czy rozkazów dla
 CPU.
 Najwięksi producenci sprzętu komputerowego, tacy jak Intel czy Nvidia,
 także wzięli udział w tworzeniu biblioteki, dostarczając własne niskopoziomowe
 programy do wykonywania operacji na GPU.
\end_layout

\begin_layout Standard
Biblioteka jest podzielona na kilkanaście modułów, dostępnych w postaci
 bibliotek statycznych lub dynamicznych.
 Poniżej zostały omówione najważniejsze moduły, które znalazły zastosowanie
 w implementacji pracy inżynierskiej:
\end_layout

\begin_layout Itemize
core - podstawowe funkcje do działań na tablicach wielowymiarowych,
\end_layout

\begin_layout Itemize
highgui - obsługa graficznego interfejsu użytkownika, wyświetlanie zdjęć
 i wideo ,
\end_layout

\begin_layout Itemize
imgproc - funkcje do przetwarzania obrazu: filtracja, transformacje geometryczne
, konwersje między przestrzeniami barw,
\end_layout

\begin_layout Itemize
imgcodecs - interfejs do odczytu i zapisu zdjęć,
\end_layout

\begin_layout Itemize
videoio - przechwytywanie obrazu wideo,
\end_layout

\begin_layout Itemize
video - analiza obrazu wideo(śledzenie ruchu, wyodrębnianie tła),
\end_layout

\begin_layout Itemize
features2D - znajdywanie krawędzi, dopasowywanie szablonów,
\end_layout

\begin_layout Itemize
objectdect - dopasowywanie i wykrywanie obiektów.
 
\end_layout

\begin_layout Standard
OpenCv znalazło wiele zastosowań w aplikacjach przemysłowych, takich jak:
 inspekcja gotowych produktów w fabrykach, medycyna, bezpieczeństwo, systemy
 wizyjne „wielowymiarowe”, robotyka.
 
\end_layout

\begin_layout Section*
NumPy
\end_layout

\begin_layout Standard
NumPy jest zewnętrzną biblioteką 
\begin_inset Quotes pld
\end_inset

open source
\begin_inset Quotes prd
\end_inset

, służącą do przeprowadzania obliczeń na n-wymiarowych tablicach.
 Zapewnia ona funkcjonalność podobną do środowiska Matlab.
 Podstawowa typ tablicy, używany przez bibliotekę znacząco różni się od
 tablicy(listy) samego Pythona: lista jest kontenerem heterogonicznym, mogącym
 dynamicznie zmieniać swój rozmiar, natomiast 
\begin_inset Quotes pld
\end_inset

ndarray
\begin_inset Quotes prd
\end_inset

 jest tablicą homogeniczną o stałym rozmiarze.Rozwiązanie takie zapewnia
 wysoką wydajność obliczeń i możliwość bezpośredniej integracji z plikami
 binarnymi biblioteki napisanymi w języku C/C++.
\end_layout

\begin_layout Section*
SciPy
\end_layout

\begin_layout Standard
Biblioteka SciPy(skrót od 
\begin_inset Quotes pld
\end_inset

Scientific Python
\begin_inset Quotes prd
\end_inset

) jest biblioteką 
\begin_inset Quotes pld
\end_inset

open-source
\begin_inset Quotes prd
\end_inset

 zawierającą funkcje do rozwiązywania zadań optymalizacji, algebry liniowej,
 przetwarzania sygnałów czy rozwiązywania równań różniczkowych.
 Biblioteka pozwala zrealizować większość funkcjonalności środowiska Matlab.
 
\end_layout

\begin_layout Section*
PyGtk + Glade
\end_layout

\begin_layout Standard
W celu zaprojektowania i stworzenia interfejsu graficznego użytkownika zostało
 wykorzystane PyGtk oraz program Glade.
\end_layout

\begin_layout Standard
PyGtk jest nakładką na bibliotekę Gtk+, pozwalającą na tworzenie graficznego
 interfejsu użytkownika przy użyciu języka Python.
 Znalazła ona zastosowanie w wielu popularnych aplikacjach: BitTorrent,
 Gedit, GIMP.
 Jest częścią linuksowego środowiska graficznego GNOME.
 
\end_layout

\begin_layout Standard
Glade jest programem to projektowania interfejsu graficznego użytkownika
 z wykorzystaniem 
\begin_inset Quotes pld
\end_inset

widgetów
\begin_inset Quotes prd
\end_inset

 z biblioteki Gtk.
 Stworzony projekt okna interfejsu jest zapisywany do pliku xml.
 Spreparowany w ten sposób plik, może być wykorzystany do zbudowania okna
 za pomocą klasy GtkBuilder.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/glade.png
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Widok okna programu Glade
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section*
Sphinx
\end_layout

\begin_layout Standard
Sphinx jest to narzędzie służące do automatycznej generacji dokumentacji
 programu na podstawie komentarzy zawartych w kodzie.
 Program ten pozwala na tworzenie dokumentacji programów napisanych w Pythonie
 bądź C++.
 Aby dokumentacja mogła zostać wygenerowana, komentarze muszą być zgodne
 ze standardem 
\begin_inset Quotes pld
\end_inset

reStructuredText
\begin_inset Quotes prd
\end_inset

.
 Dokumentacja może być wygenerowana w postaci tekstu, htmla, w formacie
 pdf czy Latex.
\end_layout

\begin_layout Standard
###### Tutaj dać screen dokumentacji
\end_layout

\begin_layout Chapter
Opis programu
\end_layout

\begin_layout Standard
Poniższy rozdział opisuje interfejs i sposób działania zaimplementowanego
 programu.
\end_layout

\begin_layout Section*
Struktura programu
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/struktura programu.png
	scale 50

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Widok struktury programu
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Program został podzielony na następujące pliki oraz foldery:
\end_layout

\begin_layout Itemize
config.json - plik konfiguracyjny programu, zawiera parametry algorytmów
 oraz opcje dotyczące prezentacji wyników programu,
\end_layout

\begin_layout Itemize
data - folder do którego program zapisuje dane o wykrytych pojazdach do
 baz danych SQLite,
\end_layout

\begin_layout Itemize
doc - dokumentacja programu w formacie .html wygenerowana przy użyciu narzędzia
 Sphinx,
\end_layout

\begin_layout Itemize
exemples - spreparowane nagrania testowe,
\end_layout

\begin_layout Itemize
gui - pliki w formacie .glade używane do wyświetlania interfejsu graficznego
 użytkownika,
\end_layout

\begin_layout Itemize
images - zdjęcia wykrytych samochodów, opisane danymi samochodu
\end_layout

\begin_layout Itemize
readme.txt - plik tekstowy zawierający informacje o potrzebnych do uruchomienia
 programu bibliotekach i sposobie ich instalacji,
\end_layout

\begin_layout Itemize
run.py - skrypt uruchamiający program,
\end_layout

\begin_layout Itemize
src - pliki źródłowe programu,
\end_layout

\begin_layout Itemize
videos - zapisane przez program wyniki analizy w postaci plików wideo.
\end_layout

\begin_layout Subsection*
Główne okno programu
\end_layout

\begin_layout Standard
Po uruchomieniu programu skryptem z pliku run.py pojawia się główne okno
 programu.
 Ma ono początkowo postać zwykłego paska złożonego z przycisków.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/widok programu.png
	scale 75

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Główne okno programu
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Główne okno programu zapewnia następujące funkcje:
\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Otwórz plik wideo
\begin_inset Quotes prd
\end_inset

 - otwiera poniższe okno dialogowe, umożliwiające wybór jednego bądź większe
 ilości plików wideo do analizy.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/okno wyboru pliku.png
	scale 40

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Okno wyboru plików
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Otwórz obraz z kamery
\begin_inset Quotes prd
\end_inset

 - uruchamia podprogram, który zajmuje się analizą obrazu z kamery w czasie
 rzeczywistym ### dodać screen podprogramu
\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Otwórz plik bazy danych
\begin_inset Quotes prd
\end_inset

 - otwiera wskazaną bazę danych i prezentuje zawarte w niej dane o pojazdach
\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Przeglądaj obrazy
\begin_inset Quotes prd
\end_inset

 - włącza przeglądarkę zapisanych przez program zdjęć pojazdów
\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Usuń poprzednie dane
\begin_inset Quotes prd
\end_inset

 - usuwa zdjęcia, filmy i dane zapisane przez poprzednie sesje programu
\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Włącz/wyłącz algorytm
\begin_inset Quotes prd
\end_inset

 - umożliwia wyłączenie algorytmu w celu kalibracji ustawień
\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Odtwarzaj wczytane pliki
\begin_inset Quotes prd
\end_inset

 - rozpoczyna wyświetlanie i analizę 
\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Zatrzymaj odtwarzanie
\begin_inset Quotes prd
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Zakończ odtwarzanie
\begin_inset Quotes prd
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Włącz/wyłącz nagrywanie
\begin_inset Quotes prd
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Ustawienia
\begin_inset Quotes prd
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Dokumentacja
\begin_inset Quotes prd
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

O programie
\begin_inset Quotes prd
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Zakończ
\begin_inset Quotes prd
\end_inset


\end_layout

\begin_layout Chapter
Podsumowanie
\begin_inset CommandInset label
LatexCommand label
name "chap:Podsumowanie"

\end_inset


\end_layout

\begin_layout Standard
A tutaj będzie podsumowanie pracy inżynierskiej, gdy już napiszę to gówno
\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "bibliografia"
options "bibtotoc,bst/IEEEtranS"

\end_inset


\end_layout

\end_body
\end_document
